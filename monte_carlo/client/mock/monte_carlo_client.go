// Code generated by mockery v2.34.2. DO NOT EDIT.

package mock

import (
	context "context"

	graphql "github.com/hasura/go-graphql-client"
	mock "github.com/stretchr/testify/mock"
)

// MonteCarloClient is an autogenerated mock type for the MonteCarloClient type
type MonteCarloClient struct {
	mock.Mock
}

type MonteCarloClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MonteCarloClient) EXPECT() *MonteCarloClient_Expecter {
	return &MonteCarloClient_Expecter{mock: &_m.Mock}
}

// ExecRaw provides a mock function with given fields: ctx, query, variables, options
func (_m *MonteCarloClient) ExecRaw(ctx context.Context, query string, variables map[string]interface{}, options ...graphql.Option) ([]byte, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query, variables)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, ...graphql.Option) ([]byte, error)); ok {
		return rf(ctx, query, variables, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, ...graphql.Option) []byte); ok {
		r0 = rf(ctx, query, variables, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, ...graphql.Option) error); ok {
		r1 = rf(ctx, query, variables, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonteCarloClient_ExecRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecRaw'
type MonteCarloClient_ExecRaw_Call struct {
	*mock.Call
}

// ExecRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - variables map[string]interface{}
//   - options ...graphql.Option
func (_e *MonteCarloClient_Expecter) ExecRaw(ctx interface{}, query interface{}, variables interface{}, options ...interface{}) *MonteCarloClient_ExecRaw_Call {
	return &MonteCarloClient_ExecRaw_Call{Call: _e.mock.On("ExecRaw",
		append([]interface{}{ctx, query, variables}, options...)...)}
}

func (_c *MonteCarloClient_ExecRaw_Call) Run(run func(ctx context.Context, query string, variables map[string]interface{}, options ...graphql.Option)) *MonteCarloClient_ExecRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]graphql.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(graphql.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MonteCarloClient_ExecRaw_Call) Return(_a0 []byte, _a1 error) *MonteCarloClient_ExecRaw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MonteCarloClient_ExecRaw_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, ...graphql.Option) ([]byte, error)) *MonteCarloClient_ExecRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Mutate provides a mock function with given fields: ctx, m, variables, options
func (_m *MonteCarloClient) Mutate(ctx context.Context, m interface{}, variables map[string]interface{}, options ...graphql.Option) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, m, variables)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.Option) error); ok {
		r0 = rf(ctx, m, variables, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonteCarloClient_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type MonteCarloClient_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - ctx context.Context
//   - m interface{}
//   - variables map[string]interface{}
//   - options ...graphql.Option
func (_e *MonteCarloClient_Expecter) Mutate(ctx interface{}, m interface{}, variables interface{}, options ...interface{}) *MonteCarloClient_Mutate_Call {
	return &MonteCarloClient_Mutate_Call{Call: _e.mock.On("Mutate",
		append([]interface{}{ctx, m, variables}, options...)...)}
}

func (_c *MonteCarloClient_Mutate_Call) Run(run func(ctx context.Context, m interface{}, variables map[string]interface{}, options ...graphql.Option)) *MonteCarloClient_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]graphql.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(graphql.Option)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MonteCarloClient_Mutate_Call) Return(_a0 error) *MonteCarloClient_Mutate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonteCarloClient_Mutate_Call) RunAndReturn(run func(context.Context, interface{}, map[string]interface{}, ...graphql.Option) error) *MonteCarloClient_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, q, variables, options
func (_m *MonteCarloClient) Query(ctx context.Context, q interface{}, variables map[string]interface{}, options ...graphql.Option) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, q, variables)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.Option) error); ok {
		r0 = rf(ctx, q, variables, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonteCarloClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MonteCarloClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - q interface{}
//   - variables map[string]interface{}
//   - options ...graphql.Option
func (_e *MonteCarloClient_Expecter) Query(ctx interface{}, q interface{}, variables interface{}, options ...interface{}) *MonteCarloClient_Query_Call {
	return &MonteCarloClient_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, q, variables}, options...)...)}
}

func (_c *MonteCarloClient_Query_Call) Run(run func(ctx context.Context, q interface{}, variables map[string]interface{}, options ...graphql.Option)) *MonteCarloClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]graphql.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(graphql.Option)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MonteCarloClient_Query_Call) Return(_a0 error) *MonteCarloClient_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonteCarloClient_Query_Call) RunAndReturn(run func(context.Context, interface{}, map[string]interface{}, ...graphql.Option) error) *MonteCarloClient_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonteCarloClient creates a new instance of MonteCarloClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonteCarloClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonteCarloClient {
	mock := &MonteCarloClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
